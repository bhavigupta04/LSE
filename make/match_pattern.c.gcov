        -:    0:Source:../src/match_pattern.c
        -:    0:Graph:match_pattern.gcno
        -:    0:Data:match_pattern.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:/*********************************************************************************
        -:    2:*	FileName : match_pattern.c
        -:    3:*
        -:    4:*	Description : This file contains the functions to search for the 
        -:    5:*			string/pattern in the files.
        -:    6:*
        -:    7:*	Date:		Name:		Reference:		Reason:
        -:    8:*	30/04/18	GR_TH5_C_5	Local Search Engine	Nalanda Project
        -:    9:*
        -:   10:*	Copyright @2018, Aricent Tech. Holdings Ltd.
        -:   11:*
        -:   12:**********************************************************************************/
        -:   13:
        -:   14:/******************************************************************************
        -:   15:*
        -:   16:*				USER DEFINED HEADER 
        -:   17:*
        -:   18:******************************************************************************/
        -:   19:
        -:   20:#include <search_util.h>
        -:   21:
        -:   22:/******************************************************************************
        -:   23:*
        -:   24:*	FUNCTION NAME : match_pattern()
        -:   25:*
        -:   26:*	DESCRIPTION : This function is used for matching the user string/pattern
        -:   27:*			in the file.
        -:   28:*
        -:   29:*	ARGUMENTS : file_name - file to search in.
        -:   30:*		     user_pattern - string/pattern to search for.
        -:   31:*
        -:   32:*	RETURNS : return SUCCESS on match otherwise returns FAILURE.
        -:   33:*
        -:   34:******************************************************************************/
        -:   35:
       92:   36:int match_pattern(char *file_name, char *user_pattern)
        -:   37:{
       92:   38:	FILE *fp = NULL;
       92:   39:    	char file_data[MAX_SIZE] = {'\0'};	/* buffer to store the file data */ 
        -:   40:
        -:   41:	//logging_report(NORMAL, "ENTERING: match_pattern()");
        -:   42:	/* Opening the file in read mode */
       92:   43:    	if((fp = fopen(file_name, "r")) != NULL)
        -:   44:    	{
        -:   45:		/* Reading data into buffer from file */
     2060:   46:    		while(fgets(file_data, sizeof(file_data), fp) != NULL)
        -:   47:    		{	
        -:   48:			/* Matching the pattern */
     1894:   49:        		if(strstr(file_data, user_pattern) != NULL)
        -:   50:		    	{   
       18:   51:                		memset(file_data, '\0', sizeof(file_data));	/* flushing the buffer */
       18:   52:			    	fclose(fp);						/* file closing */
        -:   53:				
        -:   54:				//logging_report(NORMAL, "EXITING: match_pattern()");
       18:   55:			    	return SUCCESS;					/* returning SUCCESS on match */
        -:   56:            		}
        -:   57:    		}
        -:   58:    	}   
        -:   59:	else
        -:   60:	{
    #####:   61:		printf("%s File not opened\n", file_name);
        -:   62:	}
        -:   63:
        -:   64:	//logging_report(NORMAL, "EXITING: match_pattern()");
       74:   65:	return FAILURE;
        -:   66:}
        -:   67:
        -:   68:/******************************************************************************
        -:   69:*
        -:   70:*	FUNCTION NAME : read_temp_file()
        -:   71:*
        -:   72:*	DESCRIPTION : This function read the temporary file and store it in
        -:   73:			buffer.
        -:   74:*
        -:   75:*	ARGUMENTS : path_buffer - empty buffer
        -:   76:*
        -:   77:*	RETURNS : NULL
        -:   78:*
        -:   79:******************************************************************************/
        -:   80:
       18:   81:void read_temp_file(char *path_buffer)
        -:   82:{
       18:   83:	FILE *fp = NULL;
        -:   84:
       18:   85:	logging_report("ENTERING: read_temp_file()");
        -:   86:   	/* Opening the temp file in read mode */
       18:   87:	fp = fopen("/user/gur51070/project_practice_1.0/LSE_1.1_updated/data/temp_file.txt", "r");
       18:   88:	if(fp == NULL)
        -:   89:	{
    #####:   90:		printf("\nFile not opened\n");
        -:   91:    	}
        -:   92:	
        -:   93:	/* Reading data into path_buffer from the file */	
       18:   94:	fscanf(fp, "%s", path_buffer);
        -:   95:    	
       18:   96:	fclose(fp);	/* closing the file */
       18:   97:	logging_report("EXITING: read_temp_file()");
       18:   98:}

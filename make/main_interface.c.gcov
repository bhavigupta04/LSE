        -:    0:Source:../src/main_interface.c
        -:    0:Graph:main_interface.gcno
        -:    0:Data:main_interface.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:/*******************************************************************************
        -:    2:*	FileName : main_interface.c
        -:    3:*
        -:    4:*	Description : This file contains the main function for diplaying the 
        -:    5:*			user interface and the various function calls.
        -:    6:*
        -:    7:*	Date:		Name:		Reference:		Reason:
        -:    8:*	30/04/18	GR_TH5_C_5	Local Search Engine	Nalanda Project
        -:    9:*
        -:   10:*	Copyright @2018, Aricent Tech. Holdings Ltd.
        -:   11:*
        -:   12:*******************************************************************************/
        -:   13:
        -:   14:/******************************************************************************
        -:   15:*
        -:   16:*				USER DEFINED HEADER 
        -:   17:*
        -:   18:******************************************************************************/
        -:   19:
        -:   20:#include <search_util.h>
        -:   21: 
        -:   22:/******************************************************************************
        -:   23:*
        -:   24:*	FUNCTION NAME : main()
        -:   25:*
        -:   26:*	DESCRIPTION : This is main function for calling other functions.
        -:   27:*
        -:   28:*	ARGUMENTS : No arguments
        -:   29:*
        -:   30:*	RETURNS : Returns SUCCESS as exit status.
        -:   31:*
        -:   32:******************************************************************************/
        -:   33:
        3:   34:int main()
        -:   35:{
        -:   36:	/* Variables Initializations */ 
        3:   37:	FILE *fp = NULL;	
        -:   38:
        3:   39:	int choice = 0;	/* variable for switch case */
        3:   40:	int count = 0;	/* for number of matches found */
        3:   41:	int result = 0;		/* for checking status */ 	
        3:   42:    	char path[PATH_SIZE] = "/user/gur51070/project_practice_1.0/LSE_1.1_updated/file_system/";	/* path of searching directory */
        3:   43:    	char user_string[MAX_SIZE] = {'\0'};	/* user input string/pattern */
        -:   44:	
        3:   45:	logging_report("ENTERING: main");
        -:   46:	while(SUCCESS)
        -:   47:	{
        6:   48:		printf("\n*******************************************************************\n\n");
        6:   49:		printf("\n\t\tWELCOME TO LOCAL SEARCH ENGINE\n");
        6:   50:		printf("\n\n*******************************************************************\n");
        -:   51:			
        6:   52:		printf("\nPRESS 1: TO SEARCH A WORD/STRING\t\n");
        6:   53:		printf("\nPRESS 2: TO SEARCH A FILE\t\n");
        6:   54:		printf("\nPRESS 3: TO DISPLAY LIST OF ALL FILES\n\t");
        6:   55:		printf("\nPRESS 4: TO EXIT\n");
        -:   56:		
        -:   57:		/* Taking user's choice */
        6:   58:		printf("\nPlease enter your choice : ");
        6:   59:		scanf("%d", &choice);
        -:   60:		 
        6:   61:		count = 0;	/* making count 0 for each iteration */
        -:   62:
        -:   63:		/**** Processing Starts ****/
        6:   64:		switch(choice)
        -:   65:		{
        -:   66:			/*
        -:   67:			* This case is for taking an input string/pattern and search it in the file system
        -:   68:			* and displays the list of files containing the particular string/pattern.
        -:   69:			*/
        -:   70:			case 1:
        1:   71:				memset(user_string, '\0', sizeof(user_string));
        1:   72:				printf("\nPlease enter the string/pattern to search: ");
        1:   73:				getchar();
        1:   74:				scanf("%[^\n]",user_string);
        1:   75:				trim_leading_space(user_string);
        1:   76:				printf("len:%d\n", (int)strlen(user_string));
        1:   77:				if(strlen(user_string) == 0)
        -:   78:				{
    #####:   79:					printf("Please enter the string\n");
    #####:   80:					break;
        -:   81:				}
        -:   82:				/* 
        -:   83:				* Function call for searching string in the file system.
        -:   84:				*/
        1:   85:				result = search_pattern_in_file_system(path, user_string, NULL, &count);
        1:   86:         			if(result == SUCCESS)
        -:   87:				{
        1:   88:					printf("\n\tSEARCHING SUCCESSFUL\n");
        1:   89:					if(count > 0)
        -:   90:					{
        1:   91:						printf("\nNumber of matches : %d\n", count);
        -:   92:					}
        -:   93:					else
        -:   94:					{
    #####:   95:						printf("\nString not found\n");
        -:   96:					}
        -:   97:            			}
        -:   98:            			else
        -:   99:            			{
    #####:  100:              			printf("\n\tSEARCHING FAIL\n");
        -:  101:            			}
        -:  102:				
        1:  103:				break;
        -:  104:		
        -:  105:			/*
        -:  106:			* This case is for taking absolute path from user and displaying the content
        -:  107:			* of that file.
        -:  108:			*/
        -:  109:			case 2:
        -:  110:				/*
        -:  111:				* Function call for displaying the content of the file.
        -:  112:				*/
        1:  113:				result = display_content();
        1:  114:				if(result == SUCCESS)
        -:  115:				{
        1:  116:					printf("\n\tSuccessfully displayed the content of the file\n");
        -:  117:				}
        -:  118:				else
        -:  119:				{
    #####:  120:					printf("\n\tFailed in displaying the content of the file\n");
        -:  121:				}
        1:  122:				break;
        -:  123:				
        -:  124:			/*
        -:  125:			* This case is for taking an input string/pattern and search it in the file system
        -:  126:			* and displays the list of files containing the particular string/pattern. Now it
        -:  127:			* also gives user an option to choose any file from the list and then displays the
        -:  128:			* content.
        -:  129:			*/
        -:  130:			case 3:
        1:  131:				printf("\nPlease enter the string/pattern to search: ");
        1:  132:            			getchar();
        1:  133:            			scanf("%[^\n]",user_string);
        1:  134:				trim_leading_space(user_string);
        1:  135:				printf("len:%d\n", (int)strlen(user_string));
        1:  136:				if(strlen(user_string) == 0)
        -:  137:				{
    #####:  138:					printf("\nPlease enter string\n");
    #####:  139:					break;
        -:  140:				}
        -:  141:				/*
        -:  142:				* opening a file to store the path of all files where the string matches.
        -:  143:				*/
        1:  144:				fp = fopen("../data/output.txt", "w");
        -:  145:
        -:  146:				/*
        -:  147:				* Function call for searching string in the file system.
        -:  148:				*/
        1:  149:            			result = search_pattern_in_file_system(path, user_string, fp, &count);
        1:  150:         			if(result == SUCCESS)
        -:  151:            			{
        1:  152:					printf("\n\tSEARCHING SUCCESSFUL\n");
        1:  153:					fclose(fp);	/* closing the file */
        -:  154:		
        1:  155:					if(count == 0)
        -:  156:					{
    #####:  157:						printf("\nNo Match Found\n");
    #####:  158:						break;
        -:  159:					}
        1:  160:					printf("\nTotal number of matches : %d\n", count);  
        -:  161:		
        -:  162:					/*
        -:  163:					* Function call for choosing file from the list and display the content.
        -:  164:					*/
        1:  165:					result = open_user_entered_file();
        1:  166:					if(result == SUCCESS)
        -:  167:					{
        1:  168:						printf("\n\tSuccessfully displayed the content of the file\n");
        -:  169:					}
        -:  170:					else
        -:  171:					{
    #####:  172:						printf("\n\tFailed in displaying the content of the file");
        -:  173:					}
        -:  174:            			}
        -:  175:            			else
        -:  176:            			{
    #####:  177:              			printf("\n\tSEARCHING FAIL\n");
        -:  178:            			}
        1:  179:				break;
        -:  180:
        -:  181:			/*
        -:  182:			* This case is to exit from the program.
        -:  183:			*/
        -:  184:			case 4:
        3:  185:				printf("\n\tEXIT DONE!!!\n");
        3:  186:				logging_report("EXITING: main");
        3:  187:				return SUCCESS;
        -:  188:			/*
        -:  189:			* Case for wrong choice.
        -:  190:			*/
        -:  191:			default:
    #####:  192:				printf("\n\tPlease enter a valid choice");
        -:  193:
        -:  194:		}	/* end of switch case */
        -:  195:
        3:  196:	}	/* end of while loop */	
        -:  197:	//logging_report("EXITING: main");
        -:  198:	return SUCCESS;	
        -:  199:}
